#!/usr/bin/env python3

"""Runs the SVM over pickled vector spaces (generated by vectorize.py).
Prints the results in console and saves plotted graphs in a subdir.
"""

import os, sys, pickle, json
from numpy import concatenate
from sklearn.svm import SVC
sys.path.insert(0, os.getcwd()) #add parent dir to PYTHONPATH
from lib import make_arrays, make_labels, make_confmat, get_queries
from conf import Vectors, Svm

#settings for ablation study
ablst = len(sys.argv) > 1
if ablst:
	ablated = sys.argv[1]

#objects
class Train: #will be populated by Topic
	size = Svm.trainsize

class Test: #will be populated by Topic
	pass

class Topic:
	def __init__(self, name):
		self.fullname = 'Generic' if name == 'gen' else 'Informative'

		#unpickle dict of vectors (still casted as list)
		p = Vectors(name + '/')
		binary = p.wordvec if Svm.target == 'word' else p.posvec
		#add prog number (for ablation study)
		if len(sys.argv) > 1:
			binary = f'{binary[:-7]}_{sys.argv[1]}{binary[-7:]}'

		with open(binary, 'rb') as f:
			self.dic = pickle.load(f)

		#create sub-objects
		self.train = Train()
		self.test  = Test()

		#build numpy arrays and lists of nonces
		self.train.vec, self.test.vec, self.train.nonces, \
			self.test.nonces, self.test.size = \
			make_arrays(self.dic, self.train.size)

settings = [(x, y) for x in Svm.kernel for y in Svm.C]
for kernel, C in settings:
	#create objs
	gen = Topic('gen')
	inf = Topic('inf')

	#wcreate dirs for dumps (logs and bins)
	os.makedirs(Svm.pngdir, exist_ok=True)

	#prepare train/test sets
	x_train = concatenate([gen.train.vec, inf.train.vec])
	x_test  = concatenate([gen.test.vec,  inf.test.vec])
	y_train = make_labels(gen.train.size, inf.train.size)
	y_test  = make_labels(gen.test.size,  inf.test.size)

	#line for ablation study
	if ablst:
		print(f'EXCLUDED: {ablated}\n')

	#setup SVM setup and print output
	print('SVC output:')
	clf    = SVC(C = C, verbose = True, kernel = kernel, \
		degree = Svm.degree, max_iter = Svm.maxiter) #prints data
	model  = clf.fit(x_train, y_train)
	score  = clf.score(x_test, y_test)
	y_pred = clf.predict(x_test)

	print('\n') #needed because clf prints output in a weird way
	print('SVC Model:')
	print(model)
	print()

	print(f'Score: {score}\n')

	#print nonces used for training (very long output)
	if Svm.shownonces:
		trainnonces = gen.train.nonces + inf.train.nonces
		print('Training nonces:')
		print([trainnonces[s] for s in clf.support_])
		print()

	#make confusion matrix (prints to stdout)
	nonorm, yesnorm = make_confmat(y_pred, y_test, gen.fullname, \
		inf.fullname)

	#set output files
	s = f'{Svm.desc}_{kernel}_{C}_'
	nonorm.imgfile  = Svm.pngdir + s + Svm.nonorm
	yesnorm.imgfile = Svm.pngdir + s + Svm.yesnorm

	#print str and save png of confmats
	for obj in [nonorm, yesnorm]:
		print(obj.str)
		if Svm.plot:
			obj.img.savefig(obj.imgfile)

	#test on real queries
	if Svm.realtest:
		print('Test on real queries:\n')
		queries = get_queries(Conf.queryfile)
		for key, value in queries.items():
			print(key, clf.predict(value.reshape(1, -1)))
